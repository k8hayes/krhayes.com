---
title: Calculating light availability from fisheye photos
subtitle: How to use the package hemispheR
date: 2024-08-19
categories: [Spatial Data Analysis, Workflow]
date-modified: last-modified
bibliography: references.bib
---

As part of my PhD trying to capture the impact of reburning on boreal forests, I measured understory plant communities in my study sites. I don't have a background in community ecology, but have been working with a labmate and friend to understand the impact of reburning on the communities we measured. As part of that effort, I've been curious about light availability - the reburned stands I worked in as a PhD became more and more open with more reburning, and presumably that increase in the availability of light would help certain members of the understory.

\[insert photos from stands here\]

In order to capture the light coming through the canopy in these sites, there was a moment in our sampling protocol where we set up a camera with a fisheye lens on a flat surface in the middle of the plot, laid down on our backs trying to hid in the vegetation around us[^1], and looked up at the sky. My favorite part of sampling, for the record.

[^1]: We weren't always able to sneak out of the frame successfully...

![](images/outtake.JPG){.column-margin}

To convert pictures like these into measurements of the light coming through the canopy, I've been exploring how to use the hemispheR package in R.

# Introduction to hemispheR

hemispheR was built to help process digital hemispherical photography (DHP) [@hemispheR]. It calculates leaf area index, a ratio of total leaf area of vegetation to the surface area grown, using equations predicting the relationship between the surface area of leaves and the fraction of light they intercept.

While leaf area index is really useful, I'm mostly interested in light availability more broadly - I'm really just looking for the fraction of canopy to open sky. hemispheR classifies pixels within an image as either canopy or sky as a step to calculating leaf area index, so it should work great for this.

```{r set up}
#| output: FALSE
#| echo: FALSE
library(hemispheR)
library(kableExtra)
library(tidyverse)
library(cowplot)
theme_set(theme_cowplot())

results <- read.csv("data/canopyOpen.csv")

```

I'll start by importing one of our canopy photos.

```{r importing 11_0}
ph11_0 <- import_fisheye(filename = "images/11_0.JPG",
                       circular = TRUE, display = TRUE)
plot(ph11_0)
```

This is a picture from one of our mature plots - note the black spruce all around the edges of the photo.

Using the binarize_fisheye() function, I can classify the pixels as either canopy (0) or sky (1).

```{r 11_0 binarize}
ph11_0_bin <- binarize_fisheye(ph11_0, display = TRUE)
```

Then, I'll convert the raster into a data.frame so I can calculate the ratio of canopy to sky:

```{r 11_0 ratio}
ph11_0_data <- as.data.frame(ph11_0_bin) # 0 is canopy # 1 is sky

# ratio of canopy to sky
length(which(ph11_0_data == 0)) / length(which(ph11_0_data == 1))

```

Or, said another way, the fraction of sky:

```{r 11_0 percentSky}
length(which(ph11_0_data == 0)) / nrow(ph11_0_data)
```

Now, I'll compare that to a picture from one of our thrice-burned plots:

```{r 23_3 binarize}
ph23_3 <- import_fisheye(filename = "images/23_3.JPG",
                       circular = TRUE, display = TRUE)
```

Different ratios:

```{r 23_3 ratio / percent sky}

```

# Automating hemispheR

Now, I'd like to replicate this 50 times, reading in each picture and extracting the ratio of canopy to sky. Here's the code to do so:

```{r loop}
#| eval: false
# Define the path to your folder containing JPG files
folder_path <- "data/canopy pictures/"

# List all JPG files in the folder
file_list <- list.files(path = folder_path, pattern = "\\.JPG$", full.names = TRUE)

# Initialize an empty data frame to store results
results <- data.frame(
  plot = character(),
  ratio = integer(),
  percentSky = integer(),
  stringsAsFactors = FALSE
)

for (file_path in file_list) {
  
  photo <- hemispheR::import_fisheye(filename = file_path,
                       circular = TRUE, message = FALSE)
  
  photo_bin <- binarize_fisheye(photo)
  
  photoData <- as.data.frame(photo_bin)
  
  ratio <- length(which(photoData == 1)) / length(which(photoData == 0))
  
  percentSky <- length(which(photoData == 1)) / nrow(photoData)
  
  # Append the results to the data frame
  results <- rbind(results, data.frame(
    plot = file_path,
    ratio = ratio,
    percentSky = percentSky,
    stringsAsFactors = FALSE
  ))
  
}

results <- results %>%
  mutate(plot = sub(".JPG", "", sub(".*//", "", results$plot)),
         treat = as.numeric(sub(".*_", "", plot)))

results <- left_join(results, index, by = join_by(plot, treat))
```

```{r}
kable(results)
```

# How does canopy openness differ across reburn?

```{r}
ggplot(results, aes(x = as.factor(treat), 
                    y = percentSky*100, fill = site)) +
  geom_boxplot() +
  labs(x = "Number of Fires", y = "Percent Sky %")

```

# What's the relationship between canopy openess and tree density?

```{r tree density}


```

# What's the relationship between canopy openess and solar irradiance?

I've also used solar irradiance before as a proxy for light availability. How similar are those metrics?

```{r solar irradiance}


```

# More Resources

## Session Info

```{r session info}
sessionInfo()
```
