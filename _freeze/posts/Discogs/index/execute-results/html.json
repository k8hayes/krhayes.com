{
  "hash": "02e7ab98636f2239e3666ecd39638bff",
  "result": {
    "markdown": "---\ntitle: \"Building a Discogs Visualization\"\nsubtitle: \"Using APIs to collect data\"\ndate: \"2024-04-21\"\ncategories: []\ndate-modified: last-modified\ndraft: true\nbibliography: references.bib\n---\n\n::: {.cell}\n\n:::\n\n\nOne of our family hobbies is collecting vinyl - my dad, sister and I share a Discogs(link) account, so that we can see each other's collections. It's fun to watch the value change over time, and can be a nice way to make sure you aren't overpaying in some trendy new record store.\n\nI was inspired by blogs like XX and [this one](https://www.alexrabin.com/about/record-collection) which visualize their collection in interesting ways.\n\n# Discogs Data\n\nDiscogs has two ways to download data:\n\n## Data Export\n\nYou can download a Data Export of your collection directly from the Discogs website by visiting the Dashboard of your account. This will include:\n\n\n::: {.cell .tbl-cap-location-margin tbl-cap='Data Export from Discogs'}\n\n```{.r .cell-code}\nDataExport <- read.csv(\"/Users/katherinehayes/Google Drive/Work/Website/krhayes.com/posts/Discogs/files/ndhayes-collection-20230610-1224.csv\")\n\nknitr::kable(head(DataExport))\n```\n\n::: {.cell-output-display}\n\n\n|Catalog.   |Artist                                           |Title                              |Label                |Format               | Rating| Released| release_id|CollectionFolder |Date.Added          |Collection.Media.Condition |Collection.Sleeve.Condition |Collection.Notes |\n|:----------|:------------------------------------------------|:----------------------------------|:--------------------|:--------------------|------:|--------:|----------:|:----------------|:-------------------|:--------------------------|:---------------------------|:----------------|\n|2T-541     |John Williams (4), The London Symphony Orchestra |Star Wars                          |20th Century Records |2xLP, Album, Gat     |     NA|     1977|    8867857|Dad's            |2019-12-26 22:55:51 |Very Good (VG)             |Good (G)                    |                 |\n|395 014-1  |Supertramp                                       |Brother Where You Bound            |A&M Records          |LP, Album, Emb       |     NA|     1985|     427124|Dad's            |2021-06-01 13:01:17 |Very Good Plus (VG+)       |Very Good (VG)              |                 |\n|amlh 64792 |The Police                                       |Reggatta De Blanc                  |A&M Records          |LP, Album, Promo     |     NA|     1979|    7586022|Dad's            |2019-12-27 00:24:04 |Very Good (VG)             |                            |                 |\n|SP 3614    |Joan Baez                                        |Gracias A La Vida (Here's To Life) |A&M Records          |LP, Album            |     NA|     1974|   14052830|Dad's            |2021-01-02 11:26:31 |Very Good Plus (VG+)       |Very Good (VG)              |                 |\n|SP 3623    |Cat Stevens                                      |Buddha And The Chocolate Box       |A&M Records          |LP, Album, Club, Uni |     NA|     1974|    5503531|Dad's            |2022-01-30 12:43:30 |Very Good Plus (VG+)       |Very Good (VG)              |                 |\n|SP 4365    |Cat Stevens                                      |Catch Bull At Four                 |A&M Records          |LP, Album, Ter       |     NA|     1972|    8809716|Dad's            |2020-06-07 13:50:22 |Very Good (VG)             |Very Good (VG)              |                 |\n\n\n:::\n:::\n\n\nThis is .. fine?? The albums are there, as well as information like *Release year*, the date they were added to the collection, who they belong to, etc. But, there's no information on genre. And, it's static - you have to go into Discogs and redownload new exports every so often if you want it to reflect your current collections.\n\n## Discogs API\n\nThe second way to access data from Discogs is by connecting via an API -\n\nThis lets you access Artists, Releases, manage . Plus, it's more dynamic .\n\n# API basics for someone who hasn't worked with them before\n\nQuick and dirty API definition- API, or Application Programming Interface is a way for two or more computer programs to communicate with one another.\n\n# Connecting to the Discogs API\n\nTo connect to the Discogs API, go to Discogs Developer settings once logged in. From there, you create a new application and generate a user token.\n\n## Rate Limits\n\nDiscogs has a rate limit of 60 per minute (for authenticated requests). This means the API tracks the requests over a moving average over a 60 second window which resets if no requests are made in 60 seconds. This means we'll need to throttle our requests\n\nNot all data available on the site is available by API - Price history per release and the stats page are the big ones.\n\nWith your token in hand, you can use the **httr2** package [@httr2] to call the API with your username.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#authenticate\nuser <- \"ndhayes\"\ncontent = httr2::GET(paste0(\"https://api.discogs.com/users/\",\n                            user,\n                            \"/collection/folders/0?&token=\", token))\n# the output above is in JSON, so use the following to input it as a list\ncontent <- rjson::fromJSON(rawToChar(content$content))\n\n\ntest = httr2::GET(paste0(\"https://api.discogs.com/users/\",\n                            user,\n                            \"/collection/folders?&token=\", token))\ntest = httr2::GET(paste0(\"https://api.discogs.com/users/\",\n                            user,\n                            \"/collection/folders?&token=\", token))\ntest$cookies\n```\n:::\n\n\nThis brings in all the information about a given profile. \\$count here is the number of albums in the collection, currently:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontent$count\n```\n:::\n\n\n(Keep in mind this is three people's collections).\n\nNow, we want to use this access to collect and create a dataframe with all the items in the collection.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollec_url <- httr2::GET(paste0(\"https://api.discogs.com/users/\",\n                               user, \"/collection/folders/\",\n                               content[1]$id, \"/releases?page=1&amp;per_page=100&token=\",\n                               token))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nif (collec_url$status_code == 200){\n  collec <- rjson::fromJSON(rawToChar(collec_url$content))\n  \n  collecdata <- collec$releases\n  \n  if(!is.null(collec$pagination$urls$`next`)){\n    repeat{\n      url <- httr::GET(collec$pagination$urls$`next`)\n      collec <- rjson::fromJSON(rawToChar(url$content))\n      collecdata <- c(collecdata, collec$releases)\n      if(is.null(collec$pagination$urls$`next`)){\n        break\n      }\n    }\n  }\n}\n```\n:::\n\n\nKnowing what you can collect requires understanding what's actually available. **collecdata** is a list of 1564 elements, each element representing a vinyl in the collection. Within each element are additional lists of data. **basic_information** contains\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollecdata[[1]]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncollection <- lapply(collecdata, function(obj){\n  data.frame(release_id = obj$basic_information$id %||% NA,\n             label = obj$basic_information$labels[[1]]$name %||% NA,\n             year = obj$basic_information$year %||% NA,\n             title = obj$basic_information$title %||% NA, \n             artist_name = obj$basic_information$artists[[1]]$name %||% NA,\n             artist_id = obj$basic_information$artists[[1]]$id %||% NA,\n             artist_resource_url = obj$basic_information$artists[[1]]$resource_url %||% NA, \n             format = obj$basic_information$formats[[1]]$name %||% NA,\n             genre = obj$basic_information$genres[[1]] %||% NA,\n             date_added = obj$date_added %||% NA,\n             resource_url = obj$basic_information$resource_url %||% NA)\n}) %>% do.call(rbind, .) %>% \n  unique()\n\nhead(collection)\n```\n:::\n\n\n# Visualizing\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(as.data.frame(head(sort(table(collection$genre), decreasing = TRUE), 10)),\n       aes(x = reorder(Var1, Freq), y = Freq)) + \n  geom_bar(stat = \"identity\", fill = \"#B79477\") + \n  coord_flip() + \n  xlab(\"Genre\") +\n  ylab(\"Frequency\") +\n  ggtitle(\"Most Frequent Genres\")\n```\n:::\n\n\n# More resources:\n\nadditional resources:\n\nhttps://www.alexrabin.com/blog/discogs-api-tutorial\n\nhttps://github.com/jdmar3/20240322-dataverse-api-short-course/blob/main/basics.md\n\n## Session info\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.0\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/Chicago\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] cowplot_1.1.3        discogger_0.0.0.9000 lubridate_1.9.3     \n [4] forcats_1.0.0        stringr_1.5.1        dplyr_1.1.4         \n [7] purrr_1.0.2          readr_2.1.5          tidyr_1.3.1         \n[10] tibble_3.2.1         ggplot2_3.5.0        tidyverse_2.0.0     \n[13] gt_0.10.1            httr2_1.0.1         \n\nloaded via a namespace (and not attached):\n [1] rappdirs_0.3.3    utf8_1.2.4        generics_0.1.3    xml2_1.3.6       \n [5] stringi_1.8.3     hms_1.1.3         digest_0.6.35     magrittr_2.0.3   \n [9] evaluate_0.23     grid_4.3.3        attempt_0.3.1     timechange_0.3.0 \n[13] fastmap_1.1.1     jsonlite_1.8.8    httr_1.4.7        fansi_1.0.6      \n[17] scales_1.3.0      cli_3.6.2         rlang_1.1.3       munsell_0.5.0    \n[21] withr_3.0.0       yaml_2.3.8        tools_4.3.3       tzdb_0.4.0       \n[25] colorspace_2.1-0  ratelimitr_0.4.1  curl_5.2.1        assertthat_0.2.1 \n[29] vctrs_0.6.5       R6_2.5.1          lifecycle_1.0.4   htmlwidgets_1.6.4\n[33] pkgconfig_2.0.3   pillar_1.9.0      gtable_0.3.4      glue_1.7.0       \n[37] xfun_0.43         tidyselect_1.2.1  rstudioapi_0.16.0 knitr_1.45       \n[41] htmltools_0.5.8   rmarkdown_2.26    compiler_4.3.3   \n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}