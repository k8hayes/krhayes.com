{
  "hash": "7f9e70199a5a87e4f33616c5bd505e10",
  "result": {
    "markdown": "---\ntitle: \"Building a Discogs Visualization\"\nsubtitle: \"Using APIs to collect data\"\ndate: \"2024-04-21\"\ncategories: [Data Visualization]\ndate-modified: last-modified\ndraft: true\nbibliography: references.bib\n---\n\n::: {.cell}\n\n:::\n\n\nOne of our family hobbies is collecting vinyl - my dad, sister and I share a Discogs(link) account, so that we can see each other's collections. It's fun to watch the value change over time, and can be a nice way to make sure you aren't overpaying in some trendy new record store.\n\nI was inspired by blogs like XX and [this one](https://www.alexrabin.com/about/record-collection) which visualize their collection in interesting ways.\n\n# Discogs Data\n\nDiscogs has two ways to download data:\n\n## Data Export\n\nYou can download a Data Export of your collection directly from the Discogs website by visiting the Dashboard of your account. This will include:\n\n\n::: {.cell .tbl-cap-location-margin tbl-cap='Data Export from Discogs'}\n::: {.cell-output-display}\n\n\n|Catalog.   |Artist                                           |Title                              |Label                |Format               | Rating| Released| release_id|CollectionFolder |Date.Added          |Collection.Media.Condition |Collection.Sleeve.Condition |Collection.Notes |\n|:----------|:------------------------------------------------|:----------------------------------|:--------------------|:--------------------|------:|--------:|----------:|:----------------|:-------------------|:--------------------------|:---------------------------|:----------------|\n|2T-541     |John Williams (4), The London Symphony Orchestra |Star Wars                          |20th Century Records |2xLP, Album, Gat     |     NA|     1977|    8867857|Dad's            |2019-12-26 22:55:51 |Very Good (VG)             |Good (G)                    |                 |\n|395 014-1  |Supertramp                                       |Brother Where You Bound            |A&M Records          |LP, Album, Emb       |     NA|     1985|     427124|Dad's            |2021-06-01 13:01:17 |Very Good Plus (VG+)       |Very Good (VG)              |                 |\n|amlh 64792 |The Police                                       |Reggatta De Blanc                  |A&M Records          |LP, Album, Promo     |     NA|     1979|    7586022|Dad's            |2019-12-27 00:24:04 |Very Good (VG)             |                            |                 |\n|SP 3614    |Joan Baez                                        |Gracias A La Vida (Here's To Life) |A&M Records          |LP, Album            |     NA|     1974|   14052830|Dad's            |2021-01-02 11:26:31 |Very Good Plus (VG+)       |Very Good (VG)              |                 |\n|SP 3623    |Cat Stevens                                      |Buddha And The Chocolate Box       |A&M Records          |LP, Album, Club, Uni |     NA|     1974|    5503531|Dad's            |2022-01-30 12:43:30 |Very Good Plus (VG+)       |Very Good (VG)              |                 |\n|SP 4365    |Cat Stevens                                      |Catch Bull At Four                 |A&M Records          |LP, Album, Ter       |     NA|     1972|    8809716|Dad's            |2020-06-07 13:50:22 |Very Good (VG)             |Very Good (VG)              |                 |\n\n\n:::\n:::\n\n\nThis is .. fine?? The albums are there, as well as information like *Release year*, the date they were added to the collection, who they belong to, etc. But, there's no information on genre. And, it's static - you have to go into Discogs and redownload new exports every so often if you want it to reflect your current collections.\n\n## Discogs API\n\nThe second way to access data from Discogs is by connecting via an API -\n\nThis lets you access Artists, Releases, manage . Plus, it's more dynamic .\n\n# API basics for someone who hasn't worked with them before\n\nQuick and dirty API definition- API, or Application Programming Interface is a way for two or more computer programs to communicate with one another.\n\n# Connecting to the Discogs API\n\nTo connect to the Discogs API, go to Discogs Developer settings once logged in. From there, you create a new application and generate a user token.\n\n## Rate Limits\n\nDiscogs has a rate limit of 60 per minute (for authenticated requests). This means the API tracks the requests over a moving average over a 60 second window which resets if no requests are made in 60 seconds. This means we'll need to throttle our requests\n\nNot all data available on the site is available by API - Price history per release and the stats page are the big ones.\n\nWith your token in hand, you can use the **httr2** package [@httr2] to call the API with your username.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nuser <- \"ndhayes\"\ncontent = httr::GET(paste0(\"https://api.discogs.com/users/\", user, \"/collection/folders/0?&token=\", token))\n# the output above is in JSON, so use the following to input it as a list\ncontent <- rjson::fromJSON(rawToChar(content$content))\n\n\ncontent2 = httr::GET(paste0(\"https://api.discogs.com/users/\",\n                            user,\n                            \"/collection/folders?&token=\", token))\ntest = httr::GET(paste0(\"https://api.discogs.com/users/\",\n                            user,\n                            \"/collection/folders?&token=\", token))\ntest$cookies\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  domain flag path secure          expiration    name\n1 #HttpOnly_.discogs.com TRUE    /   TRUE 2024-05-05 18:45:42 __cf_bm\n                                                                                                                                                  value\n1 WT3OAHjr08lvNVLcYXf63wTYmIYUlXAWOUE9vmAEtm8-1714950942-1.0.1.1-rmiSExCNoDVlcLuem9NUdHcwXjRObc.VFOucvu931FHBPAWVbEyXEaaag6aintSeXjpEkkrStgJeJfE7wKqPtA\n```\n\n\n:::\n:::\n\n\nThis brings in all the information about a given profile. **\\$count** here is the number of albums in the collection, currently:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontent$count\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1587\n```\n\n\n:::\n:::\n\n\n(Keep in mind this is three people's collections).\n\nNow, we want to use this access to collect and create a dataframe with all the items in the collection.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollec_url <- httr::GET(paste0(\"https://api.discogs.com/users/\",\n                               user, \"/collection/folders/\",\n                               content[1]$id, \"/releases?page=1&amp;per_page=100&token=\",\n                               token))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nif (collec_url$status_code == 200){\n  collec <- rjson::fromJSON(rawToChar(collec_url$content))\n  \n  collecdata <- collec$releases\n  \n  if(!is.null(collec$pagination$urls$`next`)){\n    repeat{\n      url <- httr::GET(collec$pagination$urls$`next`)\n      collec <- rjson::fromJSON(rawToChar(url$content))\n      collecdata <- c(collecdata, collec$releases)\n      if(is.null(collec$pagination$urls$`next`)){\n        break\n      }\n    }\n  }\n}\n```\n:::\n\n\nKnowing what you can collect requires understanding what's actually available. **collecdata** is a list of 1564 elements, each element representing a vinyl in the collection. Within each element are additional lists of data. **basic_information** contains\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollecdata[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$id\n[1] 8867857\n\n$instance_id\n[1] 424460061\n\n$date_added\n[1] \"2019-12-26T22:55:51-08:00\"\n\n$rating\n[1] 0\n\n$basic_information\n$basic_information$id\n[1] 8867857\n\n$basic_information$master_id\n[1] 25529\n\n$basic_information$master_url\n[1] \"https://api.discogs.com/masters/25529\"\n\n$basic_information$resource_url\n[1] \"https://api.discogs.com/releases/8867857\"\n\n$basic_information$thumb\n[1] \"https://i.discogs.com/i0XmpQnz7wt94JzQ7dChriUZ8w0PBgdUdoHLhTNrC2Y/rs:fit/g:sm/q:40/h:150/w:150/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTg4Njc4/NTctMTQ3MDQyODQw/Ni0xNjg2LmpwZWc.jpeg\"\n\n$basic_information$cover_image\n[1] \"https://i.discogs.com/qktEnbuVwyNiTa_S8t7kX0Tvy8K0cU2vqeYpFnSY0ZM/rs:fit/g:sm/q:90/h:600/w:600/czM6Ly9kaXNjb2dz/LWRhdGFiYXNlLWlt/YWdlcy9SLTg4Njc4/NTctMTQ3MDQyODQw/Ni0xNjg2LmpwZWc.jpeg\"\n\n$basic_information$title\n[1] \"Star Wars\"\n\n$basic_information$year\n[1] 1977\n\n$basic_information$formats\n$basic_information$formats[[1]]\n$basic_information$formats[[1]]$name\n[1] \"Vinyl\"\n\n$basic_information$formats[[1]]$qty\n[1] \"2\"\n\n$basic_information$formats[[1]]$text\n[1] \"Gatefold, Pitman\"\n\n$basic_information$formats[[1]]$descriptions\n[1] \"LP\"     \"Album\"  \"Stereo\"\n\n\n\n$basic_information$artists\n$basic_information$artists[[1]]\n$basic_information$artists[[1]]$name\n[1] \"John Williams (4)\"\n\n$basic_information$artists[[1]]$anv\n[1] \"\"\n\n$basic_information$artists[[1]]$join\n[1] \",\"\n\n$basic_information$artists[[1]]$role\n[1] \"\"\n\n$basic_information$artists[[1]]$tracks\n[1] \"\"\n\n$basic_information$artists[[1]]$id\n[1] 273394\n\n$basic_information$artists[[1]]$resource_url\n[1] \"https://api.discogs.com/artists/273394\"\n\n\n$basic_information$artists[[2]]\n$basic_information$artists[[2]]$name\n[1] \"London Symphony Orchestra\"\n\n$basic_information$artists[[2]]$anv\n[1] \"The London Symphony Orchestra\"\n\n$basic_information$artists[[2]]$join\n[1] \"\"\n\n$basic_information$artists[[2]]$role\n[1] \"\"\n\n$basic_information$artists[[2]]$tracks\n[1] \"\"\n\n$basic_information$artists[[2]]$id\n[1] 212726\n\n$basic_information$artists[[2]]$resource_url\n[1] \"https://api.discogs.com/artists/212726\"\n\n\n\n$basic_information$labels\n$basic_information$labels[[1]]\n$basic_information$labels[[1]]$name\n[1] \"20th Century Records\"\n\n$basic_information$labels[[1]]$catno\n[1] \"2T-541\"\n\n$basic_information$labels[[1]]$entity_type\n[1] \"1\"\n\n$basic_information$labels[[1]]$entity_type_name\n[1] \"Label\"\n\n$basic_information$labels[[1]]$id\n[1] 2350\n\n$basic_information$labels[[1]]$resource_url\n[1] \"https://api.discogs.com/labels/2350\"\n\n\n\n$basic_information$genres\n[1] \"Classical\"      \"Stage & Screen\"\n\n$basic_information$styles\n[1] \"Soundtrack\"       \"Modern Classical\" \"Contemporary\"     \"Score\"           \n\n\n$folder_id\n[1] 2430300\n\n$notes\n$notes[[1]]\n$notes[[1]]$field_id\n[1] 1\n\n$notes[[1]]$value\n[1] \"Very Good (VG)\"\n\n\n$notes[[2]]\n$notes[[2]]$field_id\n[1] 2\n\n$notes[[2]]$value\n[1] \"Good (G)\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncollection <- lapply(collecdata, function(obj){\n  data.frame(release_id = obj$basic_information$id %||% NA,\n             label = obj$basic_information$labels[[1]]$name %||% NA,\n             year = obj$basic_information$year %||% NA,\n             title = obj$basic_information$title %||% NA, \n             artist_name = obj$basic_information$artists[[1]]$name %||% NA,\n             artist_id = obj$basic_information$artists[[1]]$id %||% NA,\n             artist_resource_url = obj$basic_information$artists[[1]]$resource_url %||% NA, \n             format = obj$basic_information$formats[[1]]$name %||% NA,\n             genre = obj$basic_information$genres[[1]] %||% NA,\n             date_added = obj$date_added %||% NA,\n             resource_url = obj$basic_information$resource_url %||% NA)\n}) %>% do.call(rbind, .) %>% \n  unique()\n\nknitr::kable(head(collection))\n```\n\n::: {.cell-output-display}\n\n\n| release_id|label                | year|title                              |artist_name       | artist_id|artist_resource_url                     |format |genre     |date_added                |resource_url                              |\n|----------:|:--------------------|----:|:----------------------------------|:-----------------|---------:|:---------------------------------------|:------|:---------|:-------------------------|:-----------------------------------------|\n|    8867857|20th Century Records | 1977|Star Wars                          |John Williams (4) |    273394|https://api.discogs.com/artists/273394  |Vinyl  |Classical |2019-12-26T22:55:51-08:00 |https://api.discogs.com/releases/8867857  |\n|    2092739|21 Records           | 1982|Cut                                |Golden Earring    |    247009|https://api.discogs.com/artists/247009  |Vinyl  |Rock      |2024-01-06T13:24:02-08:00 |https://api.discogs.com/releases/2092739  |\n|    9945279|30th Century Records | 2017|Youngish American                  |Dams Of The West  |   5597435|https://api.discogs.com/artists/5597435 |Vinyl  |Rock      |2023-12-09T10:28:15-08:00 |https://api.discogs.com/releases/9945279  |\n|     427124|A&M Records          | 1985|Brother Where You Bound            |Supertramp        |    251517|https://api.discogs.com/artists/251517  |Vinyl  |Rock      |2021-06-01T13:01:17-07:00 |https://api.discogs.com/releases/427124   |\n|    7586022|A&M Records          | 1979|Reggatta De Blanc                  |The Police        |      7987|https://api.discogs.com/artists/7987    |Vinyl  |Rock      |2019-12-27T00:24:04-08:00 |https://api.discogs.com/releases/7586022  |\n|   14052830|A&M Records          | 1974|Gracias A La Vida (Here's To Life) |Joan Baez         |    261867|https://api.discogs.com/artists/261867  |Vinyl  |Latin     |2021-01-02T11:26:31-08:00 |https://api.discogs.com/releases/14052830 |\n\n\n:::\n:::\n\n\n# Visualizing\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(as.data.frame(head(sort(table(collection$genre), decreasing = TRUE), 10)),\n       aes(x = reorder(Var1, Freq), y = Freq)) + \n  geom_bar(stat = \"identity\", fill = \"#B79477\") + \n  coord_flip() + \n  xlab(\"Genre\") +\n  ylab(\"Frequency\") +\n  ggtitle(\"Most Frequent Genres\")\n```\n:::\n\n\n# More resources:\n\nadditional resources:\n\nhttps://www.alexrabin.com/blog/discogs-api-tutorial\n\nhttps://github.com/jdmar3/20240322-dataverse-api-short-course/blob/main/basics.md\n\n## Session info\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.0\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/Chicago\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] here_1.0.1           cowplot_1.1.3        discogger_0.0.0.9000\n [4] lubridate_1.9.3      forcats_1.0.0        stringr_1.5.1       \n [7] dplyr_1.1.4          purrr_1.0.2          readr_2.1.5         \n[10] tidyr_1.3.1          tibble_3.2.1         ggplot2_3.5.0       \n[13] tidyverse_2.0.0      gt_0.10.1            httr2_1.0.1         \n\nloaded via a namespace (and not attached):\n [1] rappdirs_0.3.3    utf8_1.2.4        generics_0.1.3    xml2_1.3.6       \n [5] stringi_1.8.3     hms_1.1.3         digest_0.6.35     magrittr_2.0.3   \n [9] evaluate_0.23     grid_4.3.3        attempt_0.3.1     timechange_0.3.0 \n[13] fastmap_1.1.1     rprojroot_2.0.4   jsonlite_1.8.8    httr_1.4.7       \n[17] fansi_1.0.6       scales_1.3.0      cli_3.6.2         rlang_1.1.3      \n[21] munsell_0.5.0     withr_3.0.0       yaml_2.3.8        tools_4.3.3      \n[25] tzdb_0.4.0        colorspace_2.1-0  ratelimitr_0.4.1  curl_5.2.1       \n[29] assertthat_0.2.1  vctrs_0.6.5       R6_2.5.1          lifecycle_1.0.4  \n[33] htmlwidgets_1.6.4 pkgconfig_2.0.3   pillar_1.9.0      gtable_0.3.4     \n[37] glue_1.7.0        xfun_0.43         tidyselect_1.2.1  rstudioapi_0.16.0\n[41] knitr_1.45        rjson_0.2.21      htmltools_0.5.8   rmarkdown_2.26   \n[45] compiler_4.3.3   \n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}